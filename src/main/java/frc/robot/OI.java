// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.commands.MyLimeLight_get_Data;
import frc.robot.commands.myLimeLight_Toggle_CamMode;
import frc.robot.commands.myLimeLight_Toggle_LED;
import frc.robot.commands.myLimeLight_Toggle_Snapshot;
import frc.robot.commands.myLimeLight_Toggle_Stream;
import frc.robot.commands.myLimeLight_set_Pipeline;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    public JoystickButton a;
    public Joystick myJoystick;

    public OI() {

        myJoystick = new Joystick(0);
        
        a = new JoystickButton(myJoystick, 1);
        a.whileHeld(new MyLimeLight_get_Data());


        // SmartDashboard Buttonss
        SmartDashboard.putData("MyLimeLight_get_Data", new MyLimeLight_get_Data());
        SmartDashboard.putData("myLimeLight_set_Pipeline(0)", new myLimeLight_set_Pipeline(0));
        SmartDashboard.putData("myLimeLight_set_Pipeline(1)", new myLimeLight_set_Pipeline(1));
        SmartDashboard.putData("myLimeLight_Toggle_CamMode", new myLimeLight_Toggle_CamMode());
        SmartDashboard.putData("myLimeLight_Toggle_LED", new myLimeLight_Toggle_LED());
        SmartDashboard.putData("myLimeLight_Toggle_Snapshot", new myLimeLight_Toggle_Snapshot());
        SmartDashboard.putData("myLimeLight_Toggle_Stream", new myLimeLight_Toggle_Stream());
    }

    public Joystick getmyJoystick() {
        return myJoystick;
    }
}


    
